/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogViewService } from "../blogView.service";
import { BlogViewCreateInput } from "./BlogViewCreateInput";
import { BlogView } from "./BlogView";
import { BlogViewFindManyArgs } from "./BlogViewFindManyArgs";
import { BlogViewWhereUniqueInput } from "./BlogViewWhereUniqueInput";
import { BlogViewUpdateInput } from "./BlogViewUpdateInput";

export class BlogViewControllerBase {
  constructor(protected readonly service: BlogViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogView })
  async createBlogView(
    @common.Body() data: BlogViewCreateInput
  ): Promise<BlogView> {
    return await this.service.createBlogView({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogView] })
  @ApiNestedQuery(BlogViewFindManyArgs)
  async blogViews(@common.Req() request: Request): Promise<BlogView[]> {
    const args = plainToClass(BlogViewFindManyArgs, request.query);
    return this.service.blogViews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogView(
    @common.Param() params: BlogViewWhereUniqueInput
  ): Promise<BlogView | null> {
    const result = await this.service.blogView({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogView(
    @common.Param() params: BlogViewWhereUniqueInput,
    @common.Body() data: BlogViewUpdateInput
  ): Promise<BlogView | null> {
    try {
      return await this.service.updateBlogView({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogView(
    @common.Param() params: BlogViewWhereUniqueInput
  ): Promise<BlogView | null> {
    try {
      return await this.service.deleteBlogView({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
